# Iris Flower Classification with Support Vector Machine (SVM)

This project demonstrates the classification of Iris flower species using the **Support Vector Machine (SVM)** algorithm. The dataset used is the well-known **Iris dataset**, which consists of 150 samples of iris flowers, with each sample containing four features: sepal length, sepal width, petal length, and petal width. The goal is to classify these samples into three species: Setosa, Versicolor, and Virginica.

## Project Overview

The project includes the following key steps:
1. **Data Loading and Exploration**: The Iris dataset is loaded and explored to understand the features and their relationships.
2. **Data Preprocessing**: Basic data cleaning and transformation are done to prepare the dataset for training.
3. **Visualization**: Visualizations such as pair plots, heatmaps, and summary statistics are used to analyze the data and identify patterns.
4. **Model Training**: A Support Vector Machine (SVM) classifier is trained to classify the flowers into their respective species.
5. **Model Evaluation**: The model is evaluated using metrics like **accuracy**, **precision**, **recall**, and **F1-score**.
6. **Hyperparameter Tuning**: The model’s performance is optimized using **GridSearchCV** to find the best combination of hyperparameters.

## Requirements

- Python 3.x
- Libraries:
  - **NumPy**: For numerical operations.
  - **Pandas**: For data manipulation and analysis.
  - **Matplotlib**: For creating static, animated, and interactive visualizations.
  - **Seaborn**: For statistical data visualization.
  - **Scikit-learn**: For machine learning algorithms and tools.
  

## Dataset

The dataset used in this project is the **Iris dataset**, which can be found in the public domain. It is loaded using **Pandas** from a CSV file (`iris.csv`), containing the following columns:

- **sepal_length**: Length of the sepal in cm.
- **sepal_width**: Width of the sepal in cm.
- **petal_length**: Length of the petal in cm.
- **petal_width**: Width of the petal in cm.
- **species**: The class label (Setosa, Versicolor, or Virginica).

## Model Training and Evaluation

1. **Training the SVM Classifier**: The model is trained using the Support Vector Machine algorithm with a **linear** or **non-linear (RBF/poly)** kernel.
2. **Model Evaluation**: The model’s performance is evaluated on the test set using accuracy, precision, recall, and F1-score.
3. **Hyperparameter Tuning**: **GridSearchCV** is used to find the best hyperparameters (e.g., `C`, `kernel`, and `gamma`) to improve the classifier’s performance.

### Evaluation Results

- **Accuracy**: The percentage of correct predictions made by the model.
- **Precision, Recall, F1-Score**: Metrics used to evaluate the performance of the model for each class.
- **Hyperparameter Optimization**: The best hyperparameters identified using GridSearchCV.


## Conclusion

This project demonstrates the steps involved in building a classification model using SVM on the Iris dataset. Through data exploration, visualization, model training, and hyperparameter tuning, we were able to achieve a high classification accuracy and gain insights into the relationships between the features and target classes.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgements

- The Iris dataset is publicly available and widely used for machine learning practice.
- This project uses Scikit-learn, a powerful library for machine learning in Python.

